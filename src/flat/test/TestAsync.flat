package flat/test

import flat/io/FancyOutputStream
import flat/primitive/number/RealNumber

class {
  visible static FancyOutputStream out = FancyOutputStream()

  Object data

  public construct(this Object data) {}

  public async toThrow(
    Class exceptionType,
    String customMessage = null,
    Bool soft = false
  ) {
    let async func() = data

    if (!Exception.catchTypeAsync(func, exceptionType, soft)) {
      let message = customMessage ?: "Did not throw exception type #exceptionType"

      throw InvalidAssertionException(message)
    }
  }

  public async toNotThrow(
    Class exceptionType,
    String customMessage = null,
    Bool soft = false
  ) {
    let async func() = data

    if (Exception.catchTypeAsync(func, exceptionType, soft)) {
      let message = customMessage ?: "Threw exception type #exceptionType"

      throw InvalidAssertionException(message)
    }
  }

  public async toThrowWithMessage<TExceptionType>(
    Class<TExceptionType> exceptionType,
    String customMessage = null,
    Bool soft = false
  ) -> Test<String> {
    let async func() = data
    let e = Exception.catchTypeAsync(func, exceptionType, soft)

    if (!e) {
      let message = customMessage ?: "Did not throw exception type #exceptionType"

      throw InvalidAssertionException(message)
    }

    return Test(e.message)
  }

  public async toNotThrowWithMessage(
    Class exceptionType,
    String expectedMessage,
    String customMessage = null,
    Bool soft = false
  ) {
    let async func() = data
    let e = Exception.catchTypeAsync(func, exceptionType, soft)

    if (e && e.message == expectedMessage) {
      let message = customMessage ?: "Threw exception type #exceptionType"

      throw InvalidAssertionException(message)
    }
  }
}
