package "novex/nest"

import "flatlang/io/FancyOutputStream"
import "flatlang/primitive/number/RealNumber"

class Nest<X> {
  visible static final FancyOutputStream out = FancyOutputStream()

  X data

  construct(this X data) {}

  public toBe(
    X other,
    String customMessage = null
  ) => true {
    if (other != data && (other == null || !other.equals(data))) {
      let message = customMessage ?: "#data != #other"

      throw InvalidAssertionException(message)

      return false
    }
  }

  // or

  public toNotBe(
    X other,
    String customMessage = null
  ) => true {
    if (other == data || other != null && other.equals(data)) {
      let message = customMessage ?: "#data == #other"

      throw InvalidAssertionException(message)

      return false
    }
  }

  [RequireGenericType X extends Double]
  public toBeWithinToleranceOf(
    Double target,
    passing Double tolerance = 0.0001,
    var String customMessage = null
  ) => true {
    if (!Double.withinTolerance((Double)data, target, tolerance)) {
      let message = customMessage ?: "#data not within tolerance of #target"

      throw InvalidAssertionException(message)

      return false
    }
  }

  public toThrow(
    Class exceptionType,
    String customMessage = null,
    Bool soft = false
  ) {
    let func() = data

    if (!Exception.catchType(func, exceptionType, soft)) {
      let message = customMessage ?: "Did not throw exception type #exceptionType"

      throw InvalidAssertionException(message)
    }
  }

  public toNotThrow(
    Class exceptionType,
    String customMessage = null,
    Bool soft = false
  ) {
    let func() = data

    if (Exception.catchType(func, exceptionType, soft)) {
      let message = customMessage ?: "Threw exception type #exceptionType"

      throw InvalidAssertionException(message)
    }
  }

  public toThrowWithMessage(
    Class exceptionType,
    String expectedMessage,
    String customMessage = null,
    Bool soft = false
  ) {
    let func() = data
    let e = Exception.catchType(func, exceptionType, soft)

    if (!e) {
      let message = customMessage ?: "Did not throw exception type #exceptionType"

      throw InvalidAssertionException(message)
    } else if (e.message != expectedMessage) {
      let message = customMessage ?: "Exception message of '#e.message' did not match '#expectedMessage'"

      throw InvalidAssertionException(message)
    }
  }

  public toNotThrowWithMessage(
    Class exceptionType,
    String expectedMessage,
    String customMessage = null,
    Bool soft = false
  ) {
    let func() = data
    let e = Exception.catchType(func, exceptionType, soft)

    if (e && e.message == expectedMessage) {
      let message = customMessage ?: "Threw exception type #exceptionType"

      throw InvalidAssertionException(message)
    }
  }

  public static fail(String message = "Failure") {
    throw InvalidAssertionException(message)
  }

  public static expect<T>(T obj) => Nest<T>(obj)

  public static expect(func()) => Nest<func()>(func)

  public static test(String description, testCode()) {
    testCode()
  }
}
