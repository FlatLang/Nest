package "novex/nest"

import "nova/primitive/number/RealNumber"

class Nest<X> {
    construct(private X data) {}
    
    public toBe<Y>(Y other, String message = null) => true {
        message = message ?: "#data != #other"
        
        if (other != data) {
            throw InvalidAssertionException(message)
            
            return false
        }
    }
    
    // or
    
    public toNotBe<Y>(Y other, String message = null) => true {
        message = message ?: "#data == #other"
        
        if (other == data) {
            throw InvalidAssertionException(message)
            
            return false
        }
    }
    
    [RequireGenericType X extends RealNumber]
    public toBeWithinToleranceOf(Double target, passing Double tolerance, String message = null) => true {
        if (!Double.withinTolerance((Double)data, target, tolerance)) {
            message = message ?: "#data not within tolerance of #target"
            
            throw InvalidAssertionException(message)
            
            return false
        }
    }
    
    public static expectValue(Object value, String message = "Value is null") {
        if (!value) {
            fail(message)
        }
    }
    
    public static expectTrue(Bool condition, String message = "Value not true") {
        if (!condition) {
            fail(message)
        }
    }
    
    public static expectFalse(Bool condition, String message = "Value not false") {
        if (condition) {
            fail(message)
        }
    }
    
    public static fail(String message = "Failure") {
        throw InvalidAssertionException(message)
    }
    
    public static expect<T>(T obj) => new Nest<T>(obj)
}
