package "novex/nest"

import "nova/io/FancyOutputStream"
import "nova/primitive/number/RealNumber"

class Nest<X> {
    visible static final FancyOutputStream out = new FancyOutputStream()
    
    X data
    
    construct(this X data) {}
    
    public toBe(X other, var String message = null) => true {
        if (other != data) {
            message = message ?: "#data != #other"
            
            throw new InvalidAssertionException(message)
            
            return false
        }
    }
    
    // or
    
    public toNotBe(X other, var String message = null) => true {
        if (other == data) {
            message = message ?: "#data == #other"
            
            throw new InvalidAssertionException(message)
            
            return false
        }
    }
    
    [RequireGenericType X extends Double]
    public toBeWithinToleranceOf(Double target, passing Double tolerance, var String message = null) => true {
        if (!Double.withinTolerance((Double)data, target, tolerance)) {
            message = message ?: "#data not within tolerance of #target"
            
            throw new InvalidAssertionException(message)
            
            return false
        }
    }
    
    public toThrow(Class exceptionType, String message = "Did not throw exception type #exceptionType", Bool soft = false) {
        let func() = data
        
        if (!Exception.catchType(func, exceptionType, soft)) {
            throw new InvalidAssertionException(message)
        }
    }
    
    public toNotThrow(Class exceptionType, String message = "Threw exception type #exceptionType", Bool soft = false) {
        let func() = data
        
        if (Exception.catchType(func, exceptionType, soft)) {
            throw new InvalidAssertionException(message)
        }
    }
    
    public static fail(String message = "Failure") {
        throw new InvalidAssertionException(message)
    }
    
    public static expect<T>(T obj) => new Nest<T>(obj)
    
    public static expect(func()) => new Nest<func()>(func)
}
